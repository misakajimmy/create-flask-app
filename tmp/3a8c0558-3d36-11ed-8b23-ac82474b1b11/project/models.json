[{"_id": "631176a2ae785d3f2e3b6940", "attributes": {"abstract": true, "axis": {}, "key": "631176a2ae785d3f2e3b6939", "label": {"i18n": {"en-US": "BoilerBase", "zh-CN": "\u9505\u7089"}}, "name": "BoilerBase"}, "coordinates": {}, "encrypted": false, "model_package_id": "6319c953cd8f479586e3fd37", "package_id": "631176a2ae785d3f2e3b693c", "package_obj_id": "631176a2ae785d3f2e3b693c", "project": "boiler", "relations": {"in_sub_class_of": []}, "scope": "demo", "skeleton": null, "template_id": "1"}, {"_id": "631176a2ae785d3f2e3b6941", "attributes": {"abstract": true, "axis": {}, "key": "631176a2ae785d3f2e3b6938", "label": {"i18n": {"en-US": "BoilerWorkshopBase", "zh-CN": "\u9505\u7089\u8f66\u95f4"}}, "name": "BoilerWorkshopBase"}, "coordinates": {}, "model_package_id": "6319c953cd8f479586e3fd37", "package_id": "631176a2ae785d3f2e3b693c", "package_obj_id": "631176a2ae785d3f2e3b693c", "project": "boiler", "relations": {"in_sub_class_of": []}, "scope": "demo", "template_id": ""}, {"_id": "63199907cd8f479586e3fd32", "attributes": {"abstract": true, "axis": {}, "label": {"i18n": {"en-US": "", "zh-CN": "\u57fa\u7840\u6d4b\u8bd5\u9505\u7089"}}, "name": "testbase"}, "coordinates": {}, "encrypted": false, "model_package_id": "6319c953cd8f479586e3fd37", "package_id": "631176a2ae785d3f2e3b693c", "package_obj_id": "631176a2ae785d3f2e3b693c", "project": "boiler", "relations": {"in_sub_class_of": []}, "scope": "demo", "skeleton": "from digital_machine import *\nfrom digital_machine.templates import simple\nfrom digital_machine.templates import templates as t\nimport pandas as pd\nimport time\nimport logging\nimport traceback\nfrom digital_machine.runtime.default.timestamps import _align_timestamp\nfrom seuif97 import pt2h\n\nINPUT_METRIC_LIST = {\"Operation\": [\"steam_pressure\", \"steam_temperature\", \n                                    \"steam_flow_rate\", \"feed_water_temperature\",\n                                    \"feed_water_pressure\", \"gas_flow_rate\"]\n                    }\ninput_features = {}\ninput_features.update({\n    param_name: {\n        \"metric\": \"%s.%s\" % (domain, param_name),\n        \"aggregation\": \"5s\",\n        \"aggregation-function\": \"avg\",# \"max\", \"min\"\n        \"rolling\": \"1min\"\n    } for domain in INPUT_METRIC_LIST for param_name in INPUT_METRIC_LIST[domain]\n})\n\nOUTPUT_METRIC_LIST = {\n    \"Operation\":[\"efficiency_forward\"]\n}\noutput_features = {}\noutput_features.update({\n    output_param: {\n        \"metric\": \"%s.%s\" % (domain, output_param),\n        \"aggregation\": \"5s\"\n        } for domain in OUTPUT_METRIC_LIST for output_param in OUTPUT_METRIC_LIST[domain]\n    })\n\n\nclass testbase(simple.SimpleClassTemplate):\n  \n    @t.model(invocation_frequency=\"5s\")\n    @t.input(features=input_features)\n    @t.output(features=output_features)\n    def boiler_model(self, instance, input, output):\n        TIMEZONE = \"Asia/Shanghai\"\n        timestamp = _align_timestamp(input.timestamp, TIMEZONE, resolution = \"5s\")\n\n        # \u83b7\u53d6\u72b6\u6001\u6570\u636e\n        all_data = pd.DataFrame()\n        for feature_name, feature_value in input.data.items():\n            if feature_value is not None:\n                all_data = pd.concat([all_data, feature_value], axis=1)\n        \n        all_data = all_data.fillna(method=\"ffill\")\n        all_data = all_data.fillna(method=\"bfill\")\n\n        logging.error(\"boiler_model input all_data = %s\", all_data)\n\n        # \u83b7\u53d6\u5c5e\u6027\u6570\u636e\n        gas_calorific = instance.get_instance().get_attribute(\"OpParam\", \"gas_calorific\")\n\n        # \u8c03\u7528main model\n        model_result = main_model(all_data,\n                                timestamp,\n                                instance.device_key.split(\"|\")[-1],\n                                gas_calorific\n                                )\n\n        # \u6570\u636e\u8f93\u51fa\n        for ins in model_result.keys():\n            for key in model_result[ins]:\n                output.data[key] = model_result[ins][key]\n\ndef calculate_efficiency(all_data, timestamp, gas_calorific):\n    if len(all_data) == 0:\n        return {}\n\n    steam_pressure = all_data[\"steam_pressure\"].iloc[-1]\n    steam_temperature = all_data[\"steam_temperature\"].iloc[-1]\n    steam_flow_rate = all_data[\"steam_flow_rate\"].iloc[-1]\n    feed_water_temperature = all_data[\"feed_water_temperature\"].iloc[-1]\n    feed_water_pressure = all_data[\"feed_water_pressure\"].iloc[-1]\n    gas_flow_rate = all_data[\"gas_flow_rate\"].iloc[-1]\n\n    efficiency_forward = steam_flow_rate / 3.6 * (pt2h(steam_pressure, steam_temperature) - \\\n        pt2h(feed_water_pressure, feed_water_temperature)) / \\\n        (gas_flow_rate * gas_calorific) * 100\n\n    return {\"efficiency_forward\": efficiency_forward}\n\ndef main_model(all_data, timestamp, instance_key, gas_calorific):\n\n    result = {\"timestamp\": timestamp}\n\n    efficiency_result = calculate_efficiency(all_data, timestamp, gas_calorific)\n\n    result.update(efficiency_result)\n\n    final_result = {}\n    final_result[instance_key] = result\n    \n    logging.error(\"final result of boiler main model = %s\", final_result)\n    return final_result\n", "template_id": "1"}]